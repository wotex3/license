<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Management</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@5/dark.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
        
    <style>   

        /* @import "https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800;900&display=swap"; */
        * {
            padding: 0;
            text-decoration: none;
            margin: 0;
            border: 0;
            outline: none;
            box-sizing: border-box;
            font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;            -webkit-font-smoothing: antialiased;
        }

        *::-webkit-scrollbar-track {
            width: 0rem;
        }

        *::-webkit-scrollbar {
            width: 0rem;
        }

        *::-webkit-scrollbar-thumb {
            background-color: transparent;
        }

        html, body {
            height: 100%;
        }

        body {
            background: radial-gradient(ellipse at bottom, #09090B 0%, rgb(15, 15, 17) 100%);
        }

        canvas {
            height: auto;
            max-width: 100%;
            vertical-align: middle;
        }

        .managament {
            position: absolute;
            width: 100%;
            height: 100%;
            display: block;
        }
        
        .resources {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 50%;
            height: 70%;
            background-color: #09090B;
            border: 1px solid #5a585896;
            border-radius: 3px;
        }

        .resources h2 {
            position: absolute;
            top: 1.15rem;
            text-align: center;
            font-size: 18px;
            color: white;
            font-weight: 550;
            width: 100%;
        }

        .appendplace {
            position: absolute;
            top: 4rem;
            width: 100%;
            height: 42.6rem;
            overflow: auto;
        }

        .license {
            position: relative;
            left: 50%;
            transform: translate(-50%);
            width: 97%;
            height: 3.2rem;
            margin-bottom: 0.3rem;
            cursor: pointer;
            border-bottom: 1px solid #5a585896;
        }

        .license>span {
            position: absolute;
            top: 29%;
            left: 0.2rem;
            color: white;
            font-size: 15px;
            font-weight: 600;
            transform: translate(-0%, -50%);
        }

        .license>h5 {
            position: absolute;
            top: 71.5%;
            left: 0.2rem;
            width: max-content;
            color: rgb(201, 198, 198);
            font-size: 12px;
            font-weight: 600;
            transform: translate(-0%, -50%);
        }
        
        .license>p {
            position: absolute;
            top: 50%;
            left: 8.2rem;
            width: max-content;
            color: rgb(201, 198, 198);
            font-size: 11px;
            font-weight: 550;
            transform: translate(-0%, -50%);
        }

        .license-btns {
            position: relative;
            top: 0;
            float: right;
            right: 0.5rem;
            width: 30rem;
            z-index: 999;
            height: 100%;
        }

        .license-btn {
            position: relative;
            float: right;
            top: 50%;
            right: 0;
            transform: translate(-0%, -50%);
            width: max-content;
            height: 65%;
            margin-left: 1rem;
            /* background-color: #427df7; */
            border-radius: 3px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            padding: 0 6px;
            font-size: 12px;
            font-weight: 550;
            cursor: pointer;
            transition: all ease 100ms;
        }

        .license-btn>span {
            margin-left: 0.2rem;
            margin-bottom: 0.17rem;
        }

        .license-btn:hover {
            filter: brightness(70%);
        }

        .change-ip {
            background-color: #4b3cd5;
        }
        .change-date {
            background-color: #0a6c50;  
        } 
        .change-note {
            background-color: #7d00d3;
        }
        .remove-license {
            background-color: #f74242;
        }

        .uptime {
            position: absolute;
            top: 80%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 50%;
            height: 25%;
            background-color: #191721;
            border: 3px solid #272630;
            box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
            border-radius: 3px;
            overflow: auto;
            
        }

        .uptime-btn {
            position: relative;
            left: 3.5rem;
            width: 15rem;
            height: 4rem;
            float: left;
            margin: 1rem;
            background-color: #25222e;
            border-radius: 3px;
        }

        .uptime-btn>span {
            position: absolute;
            top: 0.5rem;
            left: 50%;
            transform: translate(-50%);
            color: red;
        }

        .uptime-btn>svg {
            position: absolute;
            top: 2.1rem;
            left: 50%;
            transform: translate(-50%);
            color: red;
        }

        /* Modal container */
        .modal {
            display: none; /* Modal başlangıçta görünmez olsun */
            position: fixed; /* Diğer içeriklerin üzerinde sabitlenmiş olarak kalsın */
            z-index: 1; /* Diğer içeriklerin üzerinde yer alması için z-indeksini artırın */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6); /* Arkaplanı koyu bir renk ve hafif saydamlık yapın */
            overflow: auto; /* İçeriğin modal dışında görüntülenmesini sağlayın */
        }

        /* Modal içeriği */
        .modal-content {
            position: relative;
            background-color: #25222e;
            margin: 15% auto; /* Dikey ve yatay konumu ayarlayın */
            padding: 20px;
            height: 100px;
            border: 1px solid #88888852;
            width: 240px; /* Modalın genişliğini ayarlayın */
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
        }

        #newIpInput {
            position: relative;
            top: -0.2rem;
            left: 2rem;
            background-color: #26222e;
            border-radius: 3px;
            border: 1px solid #88888852;
            color: white; 
            width: 8rem;
            height: 1.5rem;
            text-align: center;
        }

        #newIpSubmit {
            position: relative;
            bottom: -1.2rem;
            left: 3rem;
            font-size: 11px;
            background-color: #427df7;
            border-radius: 3px;
            border: 1px solid #88888852;
            color: white; 
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
            width: 6rem;
            height: 1.5rem;
            cursor: pointer;
        }

        /* Kapatma düğmesi */
        .close {
            position: relative;
            top: -1.4rem;
            right: -0.85rem;
            color: #fff;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        #newIpSubmit:hover {
            background-color: #111113d0;
        }
        
        .close:hover,
        .close:focus {
            color: #f74242;
            text-decoration: none;
            cursor: pointer;
        }

        .not-licenseyet {
            position: absolute;
            top: 50%;
            left: 50%;
            color: rgb(136, 136, 136);
            font-weight: 600;
            font-size: 150px;
            transform: translate(-50%, -50%);
        }

        /* User note */

        .modal2 {
            display: none; /* Modal başlangıçta görünmez olsun */
            position: fixed; /* Diğer içeriklerin üzerinde sabitlenmiş olarak kalsın */
            z-index: 1; /* Diğer içeriklerin üzerinde yer alması için z-indeksini artırın */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6); /* Arkaplanı koyu bir renk ve hafif saydamlık yapın */
            overflow: auto; /* İçeriğin modal dışında görüntülenmesini sağlayın */
        }

        /* Modal içeriği */
        .modal2-content {
            position: relative;
            background-color: #25222e;
            margin: 15% auto; /* Dikey ve yatay konumu ayarlayın */
            padding: 20px;
            height: 100px;
            border: 1px solid #88888852;
            width: 240px; /* Modalın genişliğini ayarlayın */
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
        }

        #newNoteInput {
            position: relative;
            top: -0.2rem;
            left: 2rem;
            background-color: #26222e;
            border-radius: 3px;
            border: 1px solid #88888852;
            color: white; 
            width: 8rem;
            height: 1.5rem;
            text-align: center;
        }

        #newNoteSubmit {
            position: relative;
            bottom: -1.2rem;
            left: 3rem;
            font-size: 11px;
            background-color: #427df7;
            border-radius: 3px;
            border: 1px solid #88888852;
            color: white; 
            width: 6rem;
            height: 1.5rem;
            cursor: pointer;
        }

        #newNoteSubmit:hover {
            background-color: #111113d0;
        }

        /* Create license */

        .createlicense-btn {
            position: absolute;
            top: 0.95rem;
            left: 0.95rem;
            z-index: 999;
            width: 8rem;
            height: 2rem;
            background-color: #427df7;
            border: 2px solid #ffffff28;
            border-radius: 3px;
            font-size: 13px;
            font-weight: 500;
            color: white;
            border-radius: 3px;
            cursor: pointer;
            transition: all ease 100ms;
        }

        .createlicense-btn>span {
            position: relative;
            top: -0.15rem;
            margin-left: 0.3rem;
        }

        .createlicense-btn:hover {
            filter: brightness(70%);
        }

        .modal3 {
            display: none; /* Modal başlangıçta görünmez olsun */
            position: fixed; /* Diğer içeriklerin üzerinde sabitlenmiş olarak kalsın */
            z-index: 1; /* Diğer içeriklerin üzerinde yer alması için z-indeksini artırın */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6); /* Arkaplanı koyu bir renk ve hafif saydamlık yapın */
            overflow: auto; /* İçeriğin modal dışında görüntülenmesini sağlayın */
        }

        /* Modal içeriği */
        .modal3-content {
            position: relative;
            background-color: #25222e;
            margin: 15% auto; /* Dikey ve yatay konumu ayarlayın */
            padding: 20px;
            border: 1px solid #88888852;
            width: 250px; /* Modalın genişliğini ayarlayın */
            height: 190px;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
        }

        #modalIp {
            position: relative;
            top: -0.2rem;
            left: 50%;
            transform: translate(-50%);
            background-color: #26222e;
            border-radius: 3px;
            border: 1px solid #88888852;
            color: white; 
            width: 8rem;
            height: 1.5rem;
            text-align: center;
        }

        #modalNote {
            position: relative;
            top: 1.05rem;
            left: 50%;
            transform: translate(-50%);
            background-color: #26222e;
            border-radius: 3px;
            border: 1px solid #88888852;
            color: white; 
            width: 11rem;
            height: 1.5rem;
            text-align: center;
        }

        #modalDate {
            position: relative;
            top: 2.3rem;
            left: 50%;
            transform: translate(-50%);
            background-color: #26222e;
            border-radius: 3px;
            border: 1px solid #88888852;
            color: white; 
            width: 11rem;
            height: 1.5rem;
            text-align: center;
        }

        #modalSubmit {
            position: relative;
            bottom: -3.2rem;
            left: 3rem;
            font-size: 11px;
            background-color: #427df7;
            border-radius: 3px;
            border: 1px solid #88888852;
            color: white; 
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
            width: 6rem;
            height: 1.5rem;
            cursor: pointer;
        }

        #modalSubmit:hover {
            background-color: #427ef79d;
        }

        @media only screen and (max-width: 793px) {
            .resources {
                width: 90%;
            }

            .license {
                height: 9rem;
            }

            .license-btns {
                position: relative;
                top: 1rem;
                float: right;
                right: 0.5rem;
                width: 10rem;
                z-index: 999;
                height: 100%;
            }

            .license-btn {
                /* position: relative; */
                top: 0.5rem;
                left: 1.75rem;
                float: left;
                height: 1.5rem;
                margin: 0.2rem;
            }

            .license>span {
                position: absolute;
                top: 17%;
                left: 0.6rem;
                width: 5rem;
                color: white;
                font-size: 15px;
                font-weight: 600;
            }

            .license>h5 {
                position: absolute;
                top: 28.5%;
                left: 0.6rem;
                width: max-content;
                color: rgb(201, 198, 198);
                font-size: 14px;
                font-weight: 600;
                transform: translate(-0%, -50%);
            }
            
            .license>p {
                position: absolute;
                top: 6.4rem;
                left: 0.6rem;
                width: max-content;
                width: 12rem;
                height: 4.5rem;
                color: rgb(242, 236, 236);
                font-size: 13px;
                font-weight: 550;
                transform: translate(-0%, -50%);
            }

            .licensed-ips {
                position: relative;
                top: 2rem;
                right: -6rem;
            }
         }

         .lockauth {
            position: absolute;
            bottom: 0.5rem;
            left: 50%;
            transform: translate(-50%); 
            color: white;
         }

         lockauthh {
            position: absolute;
            bottom: 1.4rem;
            left: 50%;
            transform: translate(-50%);
            text-align: center;
            width: max-content;
            font-size: 23px;
            color: white;
            font-weight: 550;
            background-image: linear-gradient(135deg, rgb(47, 128, 237) 0%, rgb(178, 255, 218) 100%); 
            background-clip: text; 
            -webkit-text-fill-color: transparent; 
            background-repeat: no-repeat;
        }

        a {
            color: rgb(47, 128, 237);
            font-weight: 550;
            font-size: 15px;
        }

        .cfxStatus {
            position: absolute;
            top: 11.7%;
            right: 24%;
            transform: translate(-50%, -50%);
            color: #F44D47;
            border-radius: 2px;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #09090B;
            border: 1px solid #5a585896;
            padding: 0.5rem;
        }

        .sort-input {
            position: absolute;
            top: 0.95rem;
            right: 0.95rem;
            z-index: 999;
            padding-left: 0.5rem;
            padding-bottom: 0.2rem;
            width: 10rem;
            height: 2rem;
            background-color: #09090B;
            border: 1px solid #5a585896;
            border-radius: 3px;
            font-size: 13px;
            font-weight: 500;
            color: white;
            border-radius: 2px;
            transition: all ease 100ms;
        }

    </style>
</head>
<body>
    <div class="manasgament">
        <svg class="cfxStatus" stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="2.5em" width="2.5em" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke-width="2" d="M12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 Z M7,12 L11,15 L16,8"></path></svg>
        <div class="lockauth"><lockauthh>LockAuth</lockauthh>© 2024 <a href="https://discord.com/users/1037346625057730560" target="_blank">Ayaz</a> & <a href="https://discord.com/users/1037343835589713941" target="_blank">Wotex</a></div>
        <div class="resources">
            <h2 class="licensed-ips">Licenses</h2>
            <input type="text" class="sort-input" placeholder="Filter">
            <button class="createlicense-btn"><svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" height="18px" width="18px" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="10"></circle><path d="M8 12h8"></path><path d="M12 8v8"></path></svg><span>Create license</span></button>
            <div class="appendplace"></div>
        </div>
        <div id="myModal" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <input type="text" id="newIpInput" name="newIp" placeholder="Type new ip">
                <button type="submit" id="newIpSubmit">Submit</button>
            </div>
        </div>


        <div id="myModal2" class="modal2">
            <div class="modal2-content">
                <span class="close">&times;</span>
                <input type="text" id="newNoteInput" name="newIp" placeholder="Type new user note">
                <button type="submit" id="newNoteSubmit">Submit</button>
            </div>
        </div>

        <div id="myModal3" class="modal3">
            <div class="modal3-content">
                <span class="close">&times;</span>
                <input type="text" id="modalIp" name="ip" placeholder="Type new ip">
                <input type="text" id="modalNote" name="ip" placeholder="Type new user note">
                <input type="date" id="modalDate" name="date" placeholder="Type new license date">
                <button id="modalSubmit">Submit</button>
            </div>
        </div>
    </div>

    <script>
          $(document).ready(function() {
            // Create

            var data = <%- JSON.stringify(data) %>
            var cfxUptime = <%- statusCfx %>
            UpdateData(JSON.stringify(data))
            UpdateCfxUptime(cfxUptime)

            $(document).on('click', '.createlicense-btn', function (event) {
                // $('#myModal3').css('display', 'block');
                const { value: formValues } = Swal.fire({
                title: "Create license",
                html: `
                    <input id="swal-input1" placeholder="Ip" class="swal2-input">
                    <input id="swal-input2" placeholder="User note" class="swal2-input">
                    <input id="swal-input3" placeholder="Expire date" type="date" class="swal2-input">
                `,
                focusConfirm: false,
                preConfirm: () => {
                    let ip = document.getElementById("swal-input1").value;
                    let note = document.getElementById("swal-input2").value;
                    let date = document.getElementById("swal-input3").value;
                    if (ip.length < 5) {
                        Swal.fire({
                            title: "IP",
                            text: "En az 5 hanelik ip yazman gerekiyor",
                            icon: "error"
                        });
                        return
                    }
                    if (note.length < 3) {
                        Swal.fire({
                            title: "NOTE",
                            text: "En az 3 harf yazman lazım nota",
                            icon: "error"
                        });
                        return 
                    }
                    if (date.length == 0) {
                        Swal.fire({
                            title: "DATE",
                            text: "Lisansın silinme tarihini girmen gerekiyor!",
                            icon: "error"
                        });
                        return
                    }

                    $.ajax({
                        type: 'POST',
                        url: '/createLicense',
                        data: { ip: ip, note: note, date: date },
                        success: function(response) {
                            UpdateData(response.data)
                            setTimeout(() => {
                                alert(response.message)
                            }, 150); 
                        },
                        error: function(xhr, status, error) {
                            console.log('Hata:', error);
                            console.error('Hata:', error);
                        }
                    });
                }
                });
            });

            // $(document).on('click', '#modalSubmit', function (event) {
            //     var ip = $('#modalIp').val();
            //     var note = $('#modalNote').val();

            //     if (ip.length < 5) {
            //         return alert('En az 5 hanelik ip yazman gerekiyor')
            //     }
            //     if (note.length < 3) {
            //         return alert('En az 3 harf yazman lazım nota')
            //     }
            //     $.ajax({
            //         type: 'POST',
            //         url: '/createLicense',
            //         data: { ip: ip, note: note },
            //         success: function(response) {
            //             UpdateData(response.data)
            //             setTimeout(() => {
            //                 alert(response.message)
            //             }, 150);
            //         },
            //         error: function(xhr, status, error) {
            //             console.log('Hata:', error);
            //             console.error('Hata:', error);
            //         }
            //     });
            // });


            // Change ip

            let ipToChange = null; 
            let noteToChange = null;
            $(document).on('click', '.change-ip', function (event) {
                var ip = $(this).data('ip');
                // $('#myModal').css('display', 'block');
                ipToChange = ip;
                // $('#newIpInput').val(ip)

                const { value: formValues } = Swal.fire({
                title: "Change ip",
                html: `
                    <input id="swal-input1" placeholder="Ip" class="swal2-input" value="${ipToChange}">
                `,
                focusConfirm: false,
                preConfirm: () => {
                    let newIp = document.getElementById("swal-input1").value;
                    if (newIp.length < 5) {
                        Swal.fire({
                            title: "NOTE",
                            text: "En az 5 harf yazman lazım ip kısmına!",
                            icon: "error"
                        });
                        return 
                    }
                    $.ajax({
                        type: 'POST',
                        url: '/changeIp',
                        data: { ipToChange: ipToChange, newIp: newIp },
                        success: function(response) {
                            $('#myModal').css('display', 'none');
                            // $('.ip').filter(function() {
                            //     return $(this).text() === ipToChange;
                            // }).text(newIp);
                            UpdateData(response.data)
                            setTimeout(() => {
                                alert(response.message)
                            }, 150);
                        },
                        error: function(xhr, status, error) {
                            console.log('Hata:', error);
                            console.error('Hata:', error);
                        }
                    });
                }
                });
            });

            $(document).on('click', '.change-date', function (event) {
                var ip = $(this).data('ip');
                // $('#myModal').css('display', 'block');
                ipToChange = ip;
                // $('#newIpInput').val(ip)

                const { value: formValues } = Swal.fire({
                title: "Change date",
                html: `
                    <input id="swal-input1" type="date" placeholder="Ip" class="swal2-input">
                `,
                focusConfirm: false,
                preConfirm: () => {
                    let date = document.getElementById("swal-input1").value;
                    if (date.length == 0) {
                        Swal.fire({
                            title: "DATE",
                            text: "Yeni bir tarih seçmek zorundasın",
                            icon: "error"
                        });
                        return 
                    }
                    $.ajax({
                        type: 'POST',
                        url: '/changeDate',
                        data: { ip: ipToChange, date: date },
                        success: function(response) {
                            // $('#myModal').css('display', 'none');
                            // $('.ip').filter(function() {
                            //     return $(this).text() === ipToChange;
                            // }).text(newIp);
                            UpdateData(response.data)
                            setTimeout(() => {
                                alert(response.message)
                            }, 150);
                        },
                        error: function(xhr, status, error) {
                            console.log('Hata:', error);
                            console.error('Hata:', error);
                        }
                    });
                }
                });
            });

            $(document).on('click', '.close', function (event) {
                $('#myModal').css('display', 'none');
                $('#myModal2').css('display', 'none');
                $('#myModal3').css('display', 'none');
            });

            // $(document).on('click', '#newIpSubmit', function (event) {
            //     event.preventDefault(); // Formun varsayılan davranışını engelle
            //     var newIp = $('#newIpInput').val();
            //     $.ajax({
            //         type: 'POST',
            //         url: '/changeIp',
            //         data: { ipToChange: ipToChange, newIp: newIp },
            //         success: function(response) {
            //             $('#myModal').css('display', 'none');
            //             // $('.ip').filter(function() {
            //             //     return $(this).text() === ipToChange;
            //             // }).text(newIp);
            //             UpdateData(response.data)
            //             setTimeout(() => {
            //                 alert(response.message)
            //             }, 150);
            //         },
            //         error: function(xhr, status, error) {
            //             console.log('Hata:', error);
            //             console.error('Hata:', error);
            //         }
            //     });
            // });

           
            // Change user note 

            $(document).on('click', '.change-note', function (event) {
                var ip = $(this).data('ip');
                var note = $(this).data('note');
                // $('#myModal2').css('display', 'block');
                ipToChange = ip;
                noteToChange = note;
                // $('#newNoteInput').val(noteToChange)

                const { value: formValues } = Swal.fire({
                title: "Multiple inputs",
                html: `
                    <input id="swal-input1" placeholder="User note" class="swal2-input" value="${noteToChange}">
                `,
                focusConfirm: false,
                preConfirm: () => {
                    let newNote = document.getElementById("swal-input1").value;
                    if (newNote.length < 3) {
                        Swal.fire({
                            title: "NOTE",
                            text: "En az 3 harf yazman lazım not kısmına!",
                            icon: "error"
                        });
                        return 
                    }
                    $.ajax({
                        type: 'POST',
                        url: '/changeNote',
                        data: { ip: ipToChange, newNote: newNote },
                        success: function(response) {
                            // $('#myModal2').css('display', 'none');
                            // $('.note').filter(function() {
                            //     return $(this).text() === noteToChange;
                            // }).text(newNote);
                            UpdateData(response.data)
                            setTimeout(() => {
                                alert(response.message)
                            }, 150);
                        },
                        error: function(xhr, status, error) {
                            console.log('Hata:', error);
                            console.error('Hata:', error);
                        }
                    });
                }
                });
            });

            // $(document).on('click', '#newNoteSubmit', function (event) {
            //     event.preventDefault(); // Formun varsayılan davranışını engelle
            //     var newNote = $('#newNoteInput').val();
            //     $.ajax({
            //         type: 'POST',
            //         url: '/changeNote',
            //         data: { ip: ipToChange, newNote: newNote },
            //         success: function(response) {
            //             $('#myModal2').css('display', 'none');
            //             // $('.note').filter(function() {
            //             //     return $(this).text() === noteToChange;
            //             // }).text(newNote);
            //             UpdateData(response.data)
            //             setTimeout(() => {
            //                 alert(response.message)
            //             }, 150);
            //         },
            //         error: function(xhr, status, error) {
            //             console.log('Hata:', error);
            //             console.error('Hata:', error);
            //         }
            //     });
            // });
        });

        // remove license 

        $(document).on('click', '.remove-license', function (event) {
            var ip = $(this).data('ip');
            event.preventDefault(); 
            Swal.fire({
                title: "Are you sure?",
                text: "You will remove the license for the ip "+ip,
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '/removeLicense',
                        data: { ip: ip },
                        success: function(response) {
                            $(`.license[data-ip="${ip}"]`).remove()
                            UpdateData(response.data)
                            setTimeout(() => {
                                alert(response.message)
                            }, 150);
                        },
                        error: function(xhr, status, error) {
                            console.log('Hata:', error);
                            console.error('Hata:', error);
                        }
                    });     
                }
            });
        })

        function UpdateData(data) {
            if (typeof(data) == 'string') {
                data = JSON.parse(data)
            }
            $('.sort-input').val('');
            $('.sort-input').on('input', function () {
                var inputValue = $(this).val().toLowerCase();
                $(".license").filter(function () {
                    var containerText = $(this).text().toLowerCase();
                    $(this).toggle(containerText.indexOf(inputValue) > -1);
                });
            });
            if (data.length == 0) {
                $('.not-licenseyet').remove()
                $('.appendplace').append(`
                    <p class="not-licenseyet"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0V0z"></path><path d="M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5-4-4V4h8v3.5l-4 4z"></path></svg></p>
                `)
            } else {
                $('')
                $('.not-licenseyet').remove()
                $('.appendplace').html('')
                $.each(data, function(k, v) {
                    $('.appendplace').append(` 
                    <div class="license" data-ip="${v.ip}">
                        <span class="ip">${v.ip}</span>
                        <p class="note">${v.user_note}</p>
                        <h5 class="date">${v.date}</h5>
                        <div class="license-btns">
                            <div class="license-btn change-ip" data-ip="${v.ip}"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="15px" width="15px" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0z"></path><path d="M18 11c.7 0 1.37.1 2 .29V10c0-1.1-.9-2-2-2h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h6.26A6.995 6.995 0 0 1 18 11zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H8.9V6z"></path><path d="M18 13c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0 2c.83 0 1.5.67 1.5 1.5S18.83 18 18 18s-1.5-.67-1.5-1.5.67-1.5 1.5-1.5zm0 6c-1.03 0-1.94-.52-2.48-1.32.73-.42 1.57-.68 2.48-.68s1.75.26 2.48.68c-.54.8-1.45 1.32-2.48 1.32z"></path></svg><span>Change Ip</span></div>
                            <div class="license-btn change-date" data-ip="${v.ip}" data-note="${v.user_note}"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="15px" width="15px" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0z"></path><path d="M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"></path></svg><span>Change Date</span></div>
                            <div class="license-btn change-note" data-ip="${v.ip}" data-note="${v.user_note}"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="15px" width="15px" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0V0z"></path><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1s-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.41 0 .75.34.75.75s-.34.75-.75.75-.75-.34-.75-.75.34-.75.75-.75zM9.1 17H7v-2.14l5.96-5.96 2.12 2.12L9.1 17zm7.75-7.73-1.06 1.06-2.12-2.12 1.06-1.06c.2-.2.51-.2.71 0l1.41 1.41c.2.2.2.51 0 .71z"></path></svg><span>Set User Note</span></div>
                            <div class="license-btn remove-license" data-ip="${v.ip}"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 448 512" height="15px" width="15px" xmlns="http://www.w3.org/2000/svg"><path d="M268 416h24a12 12 0 0 0 12-12V188a12 12 0 0 0-12-12h-24a12 12 0 0 0-12 12v216a12 12 0 0 0 12 12zM432 80h-82.41l-34-56.7A48 48 0 0 0 274.41 0H173.59a48 48 0 0 0-41.16 23.3L98.41 80H16A16 16 0 0 0 0 96v16a16 16 0 0 0 16 16h16v336a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128h16a16 16 0 0 0 16-16V96a16 16 0 0 0-16-16zM171.84 50.91A6 6 0 0 1 177 48h94a6 6 0 0 1 5.15 2.91L293.61 80H154.39zM368 464H80V128h288zm-212-48h24a12 12 0 0 0 12-12V188a12 12 0 0 0-12-12h-24a12 12 0 0 0-12 12v216a12 12 0 0 0 12 12z"></path></svg><span>Remove License</span></div>
                        </div>
                    </div>
                `)
                })
            }
        }

        function UpdateCfxUptime(status) {
            console.log(status)
            if (status == true) {
                $('.cfxStatus').css('color', '#12ad7f')
            } else {
                $('.cfxStatus').css('color', '#F44D47')
            }
            // data = JSON.parse(links)
            // $('.uptime').html('')
            // $.each(data, function(k, v) {
            //     let icon = '';
            //     let color = '';
            //     if (v.status == true) {
            //         icon = '<svg stroke="#12ad7f" fill="#12ad7f" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke-width="2" d="M12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 Z M7,12 L11,15 L16,8"></path></svg>';
            //         color = '#12ad7f'
            //     } else {
            //         icon = '<svg stroke="#F44D47" fill="#F44D47" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke-width="2" d="M12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 Z M7,12 L11,15 L16,8"></path></svg>';
            //         color = '#F44D47'
            //     }
            //     $('.uptime').append(` 
            //     <div class="uptime-btn">
            //         <span style="color: ${color}">${v.label}</span>
            //         ${icon}
            //     </div>
            //     `)
            // })
        }

        // function UpdateLinksData(links) {
        //     data = JSON.parse(links)
        //     $('.uptime').html('')
        //     $.each(data, function(k, v) {
        //         let icon = '';
        //         let color = '';
        //         if (v.status == true) {
        //             icon = '<svg stroke="#12ad7f" fill="#12ad7f" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke-width="2" d="M12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 Z M7,12 L11,15 L16,8"></path></svg>';
        //             color = '#12ad7f'
        //         } else {
        //             icon = '<svg stroke="#F44D47" fill="#F44D47" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke-width="2" d="M12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 Z M7,12 L11,15 L16,8"></path></svg>';
        //             color = '#F44D47'
        //         }
        //         $('.uptime').append(` 
        //         <div class="uptime-btn">
        //             <span style="color: ${color}">${v.label}</span>
        //             ${icon}
        //         </div>
        //         `)
        //     })
        // }

        class Smoke {
        constructor(options) {
            const defaults = {
            width: window.innerWidth,
            height: window.innerHeight
            };

            Object.assign(this, options, defaults);
            this.onResize = this.onResize.bind(this);

            this.addEventListeners();
            this.init();
        }

        init() {
            const { width, height } = this;

            this.clock = new THREE.Clock();

            const renderer = this.renderer = new THREE.WebGLRenderer();

            renderer.setSize(width, height);

            this.scene = new THREE.Scene();

            const meshGeometry = new THREE.BoxGeometry(200, 200, 200); // CubeGeometry yerine BoxGeometry kullanıldı
            const meshMaterial = new THREE.MeshBasicMaterial({ // MeshLambertMaterial yerine MeshBasicMaterial veya MeshStandardMaterial kullanılabilir
            color: 0xaa6666,
            wireframe: false
            });
            this.mesh = new THREE.Mesh(meshGeometry, meshMaterial);

            this.cubeSineDriver = 0;

            this.addCamera();
            this.addLights();
            this.addParticles();
            this.addBackground();

            document.body.appendChild(renderer.domElement);
        }

        evolveSmoke(delta) {
            const { smokeParticles } = this;

            let smokeParticlesLength = smokeParticles.length;

            while (smokeParticlesLength--) {
            smokeParticles[smokeParticlesLength].rotation.z += delta * 0.2;
            }
        }

        addLights() {
            const { scene } = this;
            const light = new THREE.DirectionalLight(0xffffff, 0.75);

            light.position.set(-1, 0, 1);
            scene.add(light);
        }

        addCamera() {
            const { scene } = this;
            const camera = this.camera = new THREE.PerspectiveCamera(75, this.width / this.height, 1, 10000);

            camera.position.z = 1000;
            scene.add(camera);
        }

        addParticles() {
            const { scene } = this;
            const textureLoader = new THREE.TextureLoader();
            const smokeParticles = this.smokeParticles = [];

            textureLoader.load('https://rawgit.com/marcobiedermann/playground/master/three.js/smoke-particles/dist/assets/images/clouds.png', function (texture) {
            const smokeMaterial = new THREE.MeshBasicMaterial({ // MeshLambertMaterial yerine MeshBasicMaterial veya MeshStandardMaterial kullanılabilir
                color: 0xffffff,
                map: texture,
                transparent: true,
                opacity: 0.1
            });
            smokeMaterial.map.minFilter = THREE.LinearFilter;
            const smokeGeometry = new THREE.PlaneBufferGeometry(300, 300);

            const smokeMeshes = [];
            let limit = 150;

            while (limit--) {
                smokeMeshes[limit] = new THREE.Mesh(smokeGeometry, smokeMaterial);
                smokeMeshes[limit].position.set(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);
                smokeMeshes[limit].rotation.z = Math.random() * 360;
                smokeParticles.push(smokeMeshes[limit]);
                scene.add(smokeMeshes[limit]);
            }
            });
        }

        addBackground() {
            const { scene } = this;
            const textureLoader = new THREE.TextureLoader();
            const textGeometry = new THREE.PlaneBufferGeometry(600, 320);

            textureLoader.load('https://cdn.discordapp.com/attachments/1037346625057730560/1226643639472623667/image.png?ex=662583e9&is=66130ee9&hm=e457f85ecdeaa16302ef02fab95b289310c39f4ade9f9202eebedd51db0cec3f&', function (texture) {
            const textMaterial = new THREE.MeshBasicMaterial({ // MeshLambertMaterial yerine MeshBasicMaterial veya MeshStandardMaterial kullanılabilir
                blending: THREE.AdditiveBlending,
                color: 0xffffff,
                map: texture,
                opacity: 1,
                transparent: true
            });
            textMaterial.map.minFilter = THREE.LinearFilter;
            const text = new THREE.Mesh(textGeometry, textMaterial);

            text.position.z = 900;
            scene.add(text);
            });
        }

        render() {
            const { mesh } = this;
            let { cubeSineDriver } = this;

            cubeSineDriver += 0.01;

            mesh.rotation.x += 0.005;
            mesh.rotation.y += 0.01;
            mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;

            this.renderer.render(this.scene, this.camera);
        }

        update() {
            this.evolveSmoke(this.clock.getDelta());
            this.render();

            requestAnimationFrame(this.update.bind(this));
        }

        onResize() {
            const { camera } = this;

            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;

            camera.aspect = windowWidth / windowHeight;
            camera.updateProjectionMatrix();

            this.renderer.setSize(windowWidth, windowHeight);
        }

        addEventListeners() {
            window.addEventListener('resize', this.onResize);
        }
        }
        // const smoke = new Smoke();
        // smoke.update();
    </script> 
</body>
</html>