<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <title>Login</title>
    <style>   

        @import "https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800;900&display=swap"; 

        * {
            padding: 0;
            text-decoration: none;
            margin: 0;
            border: 0;
            outline: none;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif !important;
            /* font-family: Montserrat, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; */
            -webkit-font-smoothing: antialiased;
        }

        html, body {
            height: 100%;
        }

        body {
            background: radial-gradient(ellipse at bottom, #24222e 0%, #0c0d13 100%);
        }

        canvas {
            height: auto;
            max-width: 100%;
            vertical-align: middle;
        }

        #players_login {
            position: absolute;
            width: 100%;
            height: 100%;
            display: block;
        }

        .players-filter {
            position: relative;
            top: 40%;
            left: 50%;
            width: 18rem;
            height: 10.8rem;
            transform: translate(-50%, -50%);
            padding: 0.5rem;
            background-color: #181721;
            border: 2px solid #272630;
            border-radius: 3px;
        }

        #input {
            position: relative;
            top: 3.4rem;
            left: 50%;
            transform: translate(-50%);
            width: 95%;
            height: 2.8rem;
            font-weight: 500;
            padding-left: 0.6rem;
            border-radius: 3px;
            color: white;
            background-color: #24222e;
            text-align: center;
        }

        #button {
            position: relative;
            bottom: -4rem;
            left: 50%;
            transform: translate(-50%);
            width: 95%;
            height: 2.5rem;
            font-weight: 500;
            color: white;
            border-radius: 3px;
            background-color: hwb(220 26% 3%);
            cursor: pointer;
            transition: all 120ms ease-in;
        }

        #button:hover {
            background-color: #427ef759;
            width: 87%;
            height: 2.6rem;
        }

        .lockauth {
            position: absolute;
            top: 0.5rem;
            left: 50%;
            transform: translate(-50%);
            text-align: center;
            height: max-content;
            font-size: 30px;
            color: white;
            font-weight: 650;
            background-image: linear-gradient(135deg, rgb(47, 128, 237) 0%, rgb(178, 255, 218) 100%); 
            background-clip: text; 
            -webkit-text-fill-color: transparent; 
            background-repeat: no-repeat;
        }

    </style>
</head>
<body>
    <div id="players_login">
        <div class="players-filter">
            <form action="/submit" method="post">
                <span class="lockauth">LockAuth</span>
                <input type="text" name="inputValue" id="input" placeholder="Type Your Api Key">
                <button type="submit" id="button">Submit</button>
            </form>
        </div>
    </div>

    <script>
        class Smoke {
        constructor(options) {
            const defaults = {
            width: window.innerWidth,
            height: window.innerHeight
            };

            Object.assign(this, options, defaults);
            this.onResize = this.onResize.bind(this);

            this.addEventListeners();
            this.init();
        }

        init() {
            const { width, height } = this;

            this.clock = new THREE.Clock();

            const renderer = this.renderer = new THREE.WebGLRenderer();

            renderer.setSize(width, height);

            this.scene = new THREE.Scene();

            const meshGeometry = new THREE.BoxGeometry(200, 200, 200); // CubeGeometry yerine BoxGeometry kullanıldı
            const meshMaterial = new THREE.MeshBasicMaterial({ // MeshLambertMaterial yerine MeshBasicMaterial veya MeshStandardMaterial kullanılabilir
            color: 0xaa6666,
            wireframe: false
            });
            this.mesh = new THREE.Mesh(meshGeometry, meshMaterial);

            this.cubeSineDriver = 0;

            this.addCamera();
            this.addLights();
            this.addParticles();
            this.addBackground();

            document.body.appendChild(renderer.domElement);
        }

        evolveSmoke(delta) {
            const { smokeParticles } = this;

            let smokeParticlesLength = smokeParticles.length;

            while (smokeParticlesLength--) {
            smokeParticles[smokeParticlesLength].rotation.z += delta * 0.2;
            }
        }

        addLights() {
            const { scene } = this;
            const light = new THREE.DirectionalLight(0xffffff, 0.75);

            light.position.set(-1, 0, 1);
            scene.add(light);
        }

        addCamera() {
            const { scene } = this;
            const camera = this.camera = new THREE.PerspectiveCamera(75, this.width / this.height, 1, 10000);

            camera.position.z = 1000;
            scene.add(camera);
        }

        addParticles() {
            const { scene } = this;
            const textureLoader = new THREE.TextureLoader();
            const smokeParticles = this.smokeParticles = [];

            textureLoader.load('https://rawgit.com/marcobiedermann/playground/master/three.js/smoke-particles/dist/assets/images/clouds.png', function (texture) {
            const smokeMaterial = new THREE.MeshBasicMaterial({ // MeshLambertMaterial yerine MeshBasicMaterial veya MeshStandardMaterial kullanılabilir
                color: 0xffffff,
                map: texture,
                transparent: true,
                opacity: 0.1
            });
            smokeMaterial.map.minFilter = THREE.LinearFilter;
            const smokeGeometry = new THREE.PlaneBufferGeometry(300, 300);

            const smokeMeshes = [];
            let limit = 150;

            while (limit--) {
                smokeMeshes[limit] = new THREE.Mesh(smokeGeometry, smokeMaterial);
                smokeMeshes[limit].position.set(Math.random() * 500 - 250, Math.random() * 500 - 250, Math.random() * 1000 - 100);
                smokeMeshes[limit].rotation.z = Math.random() * 360;
                smokeParticles.push(smokeMeshes[limit]);
                scene.add(smokeMeshes[limit]);
            }
            });
        }

        addBackground() {
            const { scene } = this;
            const textureLoader = new THREE.TextureLoader();
            const textGeometry = new THREE.PlaneBufferGeometry(600, 320);

            textureLoader.load('https://cdn.discordapp.com/attachments/1037346625057730560/1226643639472623667/image.png?ex=662583e9&is=66130ee9&hm=e457f85ecdeaa16302ef02fab95b289310c39f4ade9f9202eebedd51db0cec3f&', function (texture) {
            const textMaterial = new THREE.MeshBasicMaterial({ // MeshLambertMaterial yerine MeshBasicMaterial veya MeshStandardMaterial kullanılabilir
                blending: THREE.AdditiveBlending,
                color: 0xffffff,
                map: texture,
                opacity: 1,
                transparent: true
            });
            textMaterial.map.minFilter = THREE.LinearFilter;
            const text = new THREE.Mesh(textGeometry, textMaterial);

            text.position.z = 900;
            scene.add(text);
            });
        }

        render() {
            const { mesh } = this;
            let { cubeSineDriver } = this;

            cubeSineDriver += 0.01;

            mesh.rotation.x += 0.005;
            mesh.rotation.y += 0.01;
            mesh.position.z = 100 + Math.sin(cubeSineDriver) * 500;

            this.renderer.render(this.scene, this.camera);
        }

        update() {
            this.evolveSmoke(this.clock.getDelta());
            this.render();

            requestAnimationFrame(this.update.bind(this));
        }

        onResize() {
            const { camera } = this;

            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;

            camera.aspect = windowWidth / windowHeight;
            camera.updateProjectionMatrix();

            this.renderer.setSize(windowWidth, windowHeight);
        }

        addEventListeners() {
            window.addEventListener('resize', this.onResize);
        }
        }
        const smoke = new Smoke();
        smoke.update();
    </script>
</body>
</html>